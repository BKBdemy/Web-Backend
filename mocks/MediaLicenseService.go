// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	LicenseKeyManager "EntitlementServer/LicenseKeyManager"

	mock "github.com/stretchr/testify/mock"
)

// MediaLicenseService is an autogenerated mock type for the MediaLicenseService type
type MediaLicenseService struct {
	mock.Mock
}

type MediaLicenseService_Expecter struct {
	mock *mock.Mock
}

func (_m *MediaLicenseService) EXPECT() *MediaLicenseService_Expecter {
	return &MediaLicenseService_Expecter{mock: &_m.Mock}
}

// AddLicenseKey provides a mock function with given fields: KeyID, EncryptionKey, ProductID
func (_m *MediaLicenseService) AddLicenseKey(KeyID string, EncryptionKey string, ProductID int) (int, error) {
	ret := _m.Called(KeyID, EncryptionKey, ProductID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, int) int); ok {
		r0 = rf(KeyID, EncryptionKey, ProductID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(KeyID, EncryptionKey, ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaLicenseService_AddLicenseKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLicenseKey'
type MediaLicenseService_AddLicenseKey_Call struct {
	*mock.Call
}

// AddLicenseKey is a helper method to define mock.On call
//   - KeyID string
//   - EncryptionKey string
//   - ProductID int
func (_e *MediaLicenseService_Expecter) AddLicenseKey(KeyID interface{}, EncryptionKey interface{}, ProductID interface{}) *MediaLicenseService_AddLicenseKey_Call {
	return &MediaLicenseService_AddLicenseKey_Call{Call: _e.mock.On("AddLicenseKey", KeyID, EncryptionKey, ProductID)}
}

func (_c *MediaLicenseService_AddLicenseKey_Call) Run(run func(KeyID string, EncryptionKey string, ProductID int)) *MediaLicenseService_AddLicenseKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MediaLicenseService_AddLicenseKey_Call) Return(_a0 int, _a1 error) *MediaLicenseService_AddLicenseKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllLicenseKeys provides a mock function with given fields:
func (_m *MediaLicenseService) GetAllLicenseKeys() []LicenseKeyManager.LicenseKey {
	ret := _m.Called()

	var r0 []LicenseKeyManager.LicenseKey
	if rf, ok := ret.Get(0).(func() []LicenseKeyManager.LicenseKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]LicenseKeyManager.LicenseKey)
		}
	}

	return r0
}

// MediaLicenseService_GetAllLicenseKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLicenseKeys'
type MediaLicenseService_GetAllLicenseKeys_Call struct {
	*mock.Call
}

// GetAllLicenseKeys is a helper method to define mock.On call
func (_e *MediaLicenseService_Expecter) GetAllLicenseKeys() *MediaLicenseService_GetAllLicenseKeys_Call {
	return &MediaLicenseService_GetAllLicenseKeys_Call{Call: _e.mock.On("GetAllLicenseKeys")}
}

func (_c *MediaLicenseService_GetAllLicenseKeys_Call) Run(run func()) *MediaLicenseService_GetAllLicenseKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MediaLicenseService_GetAllLicenseKeys_Call) Return(_a0 []LicenseKeyManager.LicenseKey) *MediaLicenseService_GetAllLicenseKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetEncryptionKey provides a mock function with given fields: KeyID
func (_m *MediaLicenseService) GetEncryptionKey(KeyID string) (LicenseKeyManager.EncryptionKey, error) {
	ret := _m.Called(KeyID)

	var r0 LicenseKeyManager.EncryptionKey
	if rf, ok := ret.Get(0).(func(string) LicenseKeyManager.EncryptionKey); ok {
		r0 = rf(KeyID)
	} else {
		r0 = ret.Get(0).(LicenseKeyManager.EncryptionKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(KeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaLicenseService_GetEncryptionKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEncryptionKey'
type MediaLicenseService_GetEncryptionKey_Call struct {
	*mock.Call
}

// GetEncryptionKey is a helper method to define mock.On call
//   - KeyID string
func (_e *MediaLicenseService_Expecter) GetEncryptionKey(KeyID interface{}) *MediaLicenseService_GetEncryptionKey_Call {
	return &MediaLicenseService_GetEncryptionKey_Call{Call: _e.mock.On("GetEncryptionKey", KeyID)}
}

func (_c *MediaLicenseService_GetEncryptionKey_Call) Run(run func(KeyID string)) *MediaLicenseService_GetEncryptionKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MediaLicenseService_GetEncryptionKey_Call) Return(_a0 LicenseKeyManager.EncryptionKey, _a1 error) *MediaLicenseService_GetEncryptionKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLicenseKey provides a mock function with given fields: KeyID
func (_m *MediaLicenseService) GetLicenseKey(KeyID string) (LicenseKeyManager.LicenseKey, error) {
	ret := _m.Called(KeyID)

	var r0 LicenseKeyManager.LicenseKey
	if rf, ok := ret.Get(0).(func(string) LicenseKeyManager.LicenseKey); ok {
		r0 = rf(KeyID)
	} else {
		r0 = ret.Get(0).(LicenseKeyManager.LicenseKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(KeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaLicenseService_GetLicenseKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseKey'
type MediaLicenseService_GetLicenseKey_Call struct {
	*mock.Call
}

// GetLicenseKey is a helper method to define mock.On call
//   - KeyID string
func (_e *MediaLicenseService_Expecter) GetLicenseKey(KeyID interface{}) *MediaLicenseService_GetLicenseKey_Call {
	return &MediaLicenseService_GetLicenseKey_Call{Call: _e.mock.On("GetLicenseKey", KeyID)}
}

func (_c *MediaLicenseService_GetLicenseKey_Call) Run(run func(KeyID string)) *MediaLicenseService_GetLicenseKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MediaLicenseService_GetLicenseKey_Call) Return(_a0 LicenseKeyManager.LicenseKey, _a1 error) *MediaLicenseService_GetLicenseKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProductLicenseKeys provides a mock function with given fields: ProductID
func (_m *MediaLicenseService) GetProductLicenseKeys(ProductID int) ([]LicenseKeyManager.LicenseKey, error) {
	ret := _m.Called(ProductID)

	var r0 []LicenseKeyManager.LicenseKey
	if rf, ok := ret.Get(0).(func(int) []LicenseKeyManager.LicenseKey); ok {
		r0 = rf(ProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]LicenseKeyManager.LicenseKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaLicenseService_GetProductLicenseKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductLicenseKeys'
type MediaLicenseService_GetProductLicenseKeys_Call struct {
	*mock.Call
}

// GetProductLicenseKeys is a helper method to define mock.On call
//   - ProductID int
func (_e *MediaLicenseService_Expecter) GetProductLicenseKeys(ProductID interface{}) *MediaLicenseService_GetProductLicenseKeys_Call {
	return &MediaLicenseService_GetProductLicenseKeys_Call{Call: _e.mock.On("GetProductLicenseKeys", ProductID)}
}

func (_c *MediaLicenseService_GetProductLicenseKeys_Call) Run(run func(ProductID int)) *MediaLicenseService_GetProductLicenseKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MediaLicenseService_GetProductLicenseKeys_Call) Return(_a0 []LicenseKeyManager.LicenseKey, _a1 error) *MediaLicenseService_GetProductLicenseKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMediaLicenseService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMediaLicenseService creates a new instance of MediaLicenseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMediaLicenseService(t mockConstructorTestingTNewMediaLicenseService) *MediaLicenseService {
	mock := &MediaLicenseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
