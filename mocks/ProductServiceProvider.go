// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	DatabaseAbstraction "EntitlementServer/DatabaseAbstraction"
	LicenseKeyManager "EntitlementServer/LicenseKeyManager"

	ProductService "EntitlementServer/ProductService"

	mock "github.com/stretchr/testify/mock"
)

// ProductServiceProvider is an autogenerated mock type for the ProductServiceProvider type
type ProductServiceProvider struct {
	mock.Mock
}

type ProductServiceProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductServiceProvider) EXPECT() *ProductServiceProvider_Expecter {
	return &ProductServiceProvider_Expecter{mock: &_m.Mock}
}

// AddProduct provides a mock function with given fields: Product
func (_m *ProductServiceProvider) AddProduct(Product ProductService.Product) (int, error) {
	ret := _m.Called(Product)

	var r0 int
	if rf, ok := ret.Get(0).(func(ProductService.Product) int); ok {
		r0 = rf(Product)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ProductService.Product) error); ok {
		r1 = rf(Product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductServiceProvider_AddProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProduct'
type ProductServiceProvider_AddProduct_Call struct {
	*mock.Call
}

// AddProduct is a helper method to define mock.On call
//   - Product ProductService.Product
func (_e *ProductServiceProvider_Expecter) AddProduct(Product interface{}) *ProductServiceProvider_AddProduct_Call {
	return &ProductServiceProvider_AddProduct_Call{Call: _e.mock.On("AddProduct", Product)}
}

func (_c *ProductServiceProvider_AddProduct_Call) Run(run func(Product ProductService.Product)) *ProductServiceProvider_AddProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ProductService.Product))
	})
	return _c
}

func (_c *ProductServiceProvider_AddProduct_Call) Return(_a0 int, _a1 error) *ProductServiceProvider_AddProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllProducts provides a mock function with given fields:
func (_m *ProductServiceProvider) GetAllProducts() []ProductService.Product {
	ret := _m.Called()

	var r0 []ProductService.Product
	if rf, ok := ret.Get(0).(func() []ProductService.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProductService.Product)
		}
	}

	return r0
}

// ProductServiceProvider_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type ProductServiceProvider_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
func (_e *ProductServiceProvider_Expecter) GetAllProducts() *ProductServiceProvider_GetAllProducts_Call {
	return &ProductServiceProvider_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts")}
}

func (_c *ProductServiceProvider_GetAllProducts_Call) Run(run func()) *ProductServiceProvider_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProductServiceProvider_GetAllProducts_Call) Return(_a0 []ProductService.Product) *ProductServiceProvider_GetAllProducts_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetOwnedProducts provides a mock function with given fields: user
func (_m *ProductServiceProvider) GetOwnedProducts(user DatabaseAbstraction.User) []ProductService.Product {
	ret := _m.Called(user)

	var r0 []ProductService.Product
	if rf, ok := ret.Get(0).(func(DatabaseAbstraction.User) []ProductService.Product); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProductService.Product)
		}
	}

	return r0
}

// ProductServiceProvider_GetOwnedProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnedProducts'
type ProductServiceProvider_GetOwnedProducts_Call struct {
	*mock.Call
}

// GetOwnedProducts is a helper method to define mock.On call
//   - user DatabaseAbstraction.User
func (_e *ProductServiceProvider_Expecter) GetOwnedProducts(user interface{}) *ProductServiceProvider_GetOwnedProducts_Call {
	return &ProductServiceProvider_GetOwnedProducts_Call{Call: _e.mock.On("GetOwnedProducts", user)}
}

func (_c *ProductServiceProvider_GetOwnedProducts_Call) Run(run func(user DatabaseAbstraction.User)) *ProductServiceProvider_GetOwnedProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseAbstraction.User))
	})
	return _c
}

func (_c *ProductServiceProvider_GetOwnedProducts_Call) Return(_a0 []ProductService.Product) *ProductServiceProvider_GetOwnedProducts_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetProduct provides a mock function with given fields: ProductID
func (_m *ProductServiceProvider) GetProduct(ProductID int) (ProductService.Product, error) {
	ret := _m.Called(ProductID)

	var r0 ProductService.Product
	if rf, ok := ret.Get(0).(func(int) ProductService.Product); ok {
		r0 = rf(ProductID)
	} else {
		r0 = ret.Get(0).(ProductService.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductServiceProvider_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type ProductServiceProvider_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ProductID int
func (_e *ProductServiceProvider_Expecter) GetProduct(ProductID interface{}) *ProductServiceProvider_GetProduct_Call {
	return &ProductServiceProvider_GetProduct_Call{Call: _e.mock.On("GetProduct", ProductID)}
}

func (_c *ProductServiceProvider_GetProduct_Call) Run(run func(ProductID int)) *ProductServiceProvider_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ProductServiceProvider_GetProduct_Call) Return(_a0 ProductService.Product, _a1 error) *ProductServiceProvider_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProductLicenseKeys provides a mock function with given fields: ProductID
func (_m *ProductServiceProvider) GetProductLicenseKeys(ProductID int) []LicenseKeyManager.LicenseKey {
	ret := _m.Called(ProductID)

	var r0 []LicenseKeyManager.LicenseKey
	if rf, ok := ret.Get(0).(func(int) []LicenseKeyManager.LicenseKey); ok {
		r0 = rf(ProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]LicenseKeyManager.LicenseKey)
		}
	}

	return r0
}

// ProductServiceProvider_GetProductLicenseKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductLicenseKeys'
type ProductServiceProvider_GetProductLicenseKeys_Call struct {
	*mock.Call
}

// GetProductLicenseKeys is a helper method to define mock.On call
//   - ProductID int
func (_e *ProductServiceProvider_Expecter) GetProductLicenseKeys(ProductID interface{}) *ProductServiceProvider_GetProductLicenseKeys_Call {
	return &ProductServiceProvider_GetProductLicenseKeys_Call{Call: _e.mock.On("GetProductLicenseKeys", ProductID)}
}

func (_c *ProductServiceProvider_GetProductLicenseKeys_Call) Run(run func(ProductID int)) *ProductServiceProvider_GetProductLicenseKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ProductServiceProvider_GetProductLicenseKeys_Call) Return(_a0 []LicenseKeyManager.LicenseKey) *ProductServiceProvider_GetProductLicenseKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

// PurchaseProduct provides a mock function with given fields: ProductID, user
func (_m *ProductServiceProvider) PurchaseProduct(ProductID int, user DatabaseAbstraction.User) error {
	ret := _m.Called(ProductID, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, DatabaseAbstraction.User) error); ok {
		r0 = rf(ProductID, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductServiceProvider_PurchaseProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurchaseProduct'
type ProductServiceProvider_PurchaseProduct_Call struct {
	*mock.Call
}

// PurchaseProduct is a helper method to define mock.On call
//   - ProductID int
//   - user DatabaseAbstraction.User
func (_e *ProductServiceProvider_Expecter) PurchaseProduct(ProductID interface{}, user interface{}) *ProductServiceProvider_PurchaseProduct_Call {
	return &ProductServiceProvider_PurchaseProduct_Call{Call: _e.mock.On("PurchaseProduct", ProductID, user)}
}

func (_c *ProductServiceProvider_PurchaseProduct_Call) Run(run func(ProductID int, user DatabaseAbstraction.User)) *ProductServiceProvider_PurchaseProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(DatabaseAbstraction.User))
	})
	return _c
}

func (_c *ProductServiceProvider_PurchaseProduct_Call) Return(_a0 error) *ProductServiceProvider_PurchaseProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewProductServiceProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductServiceProvider creates a new instance of ProductServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductServiceProvider(t mockConstructorTestingTNewProductServiceProvider) *ProductServiceProvider {
	mock := &ProductServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
