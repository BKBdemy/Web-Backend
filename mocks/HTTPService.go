// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// HTTPService is an autogenerated mock type for the HTTPService type
type HTTPService struct {
	mock.Mock
}

type HTTPService_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPService) EXPECT() *HTTPService_Expecter {
	return &HTTPService_Expecter{mock: &_m.Mock}
}

// GetLabel provides a mock function with given fields:
func (_m *HTTPService) GetLabel() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HTTPService_GetLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabel'
type HTTPService_GetLabel_Call struct {
	*mock.Call
}

// GetLabel is a helper method to define mock.On call
func (_e *HTTPService_Expecter) GetLabel() *HTTPService_GetLabel_Call {
	return &HTTPService_GetLabel_Call{Call: _e.mock.On("GetLabel")}
}

func (_c *HTTPService_GetLabel_Call) Run(run func()) *HTTPService_GetLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HTTPService_GetLabel_Call) Return(_a0 string) *HTTPService_GetLabel_Call {
	_c.Call.Return(_a0)
	return _c
}

// RegisterHandlers provides a mock function with given fields: r, middleware
func (_m *HTTPService) RegisterHandlers(r *gin.Engine, middleware ...gin.HandlerFunc) {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, r)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// HTTPService_RegisterHandlers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHandlers'
type HTTPService_RegisterHandlers_Call struct {
	*mock.Call
}

// RegisterHandlers is a helper method to define mock.On call
//   - r *gin.Engine
//   - middleware ...gin.HandlerFunc
func (_e *HTTPService_Expecter) RegisterHandlers(r interface{}, middleware ...interface{}) *HTTPService_RegisterHandlers_Call {
	return &HTTPService_RegisterHandlers_Call{Call: _e.mock.On("RegisterHandlers",
		append([]interface{}{r}, middleware...)...)}
}

func (_c *HTTPService_RegisterHandlers_Call) Run(run func(r *gin.Engine, middleware ...gin.HandlerFunc)) *HTTPService_RegisterHandlers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gin.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gin.HandlerFunc)
			}
		}
		run(args[0].(*gin.Engine), variadicArgs...)
	})
	return _c
}

func (_c *HTTPService_RegisterHandlers_Call) Return() *HTTPService_RegisterHandlers_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewHTTPService interface {
	mock.TestingT
	Cleanup(func())
}

// NewHTTPService creates a new instance of HTTPService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHTTPService(t mockConstructorTestingTNewHTTPService) *HTTPService {
	mock := &HTTPService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
