// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MultiFormatKey is an autogenerated mock type for the MultiFormatKey type
type MultiFormatKey struct {
	mock.Mock
}

type MultiFormatKey_Expecter struct {
	mock *mock.Mock
}

func (_m *MultiFormatKey) EXPECT() *MultiFormatKey_Expecter {
	return &MultiFormatKey_Expecter{mock: &_m.Mock}
}

// GetBase64 provides a mock function with given fields:
func (_m *MultiFormatKey) GetBase64() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiFormatKey_GetBase64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBase64'
type MultiFormatKey_GetBase64_Call struct {
	*mock.Call
}

// GetBase64 is a helper method to define mock.On call
func (_e *MultiFormatKey_Expecter) GetBase64() *MultiFormatKey_GetBase64_Call {
	return &MultiFormatKey_GetBase64_Call{Call: _e.mock.On("GetBase64")}
}

func (_c *MultiFormatKey_GetBase64_Call) Run(run func()) *MultiFormatKey_GetBase64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MultiFormatKey_GetBase64_Call) Return(_a0 string, _a1 error) *MultiFormatKey_GetBase64_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBytes provides a mock function with given fields:
func (_m *MultiFormatKey) GetBytes() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiFormatKey_GetBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBytes'
type MultiFormatKey_GetBytes_Call struct {
	*mock.Call
}

// GetBytes is a helper method to define mock.On call
func (_e *MultiFormatKey_Expecter) GetBytes() *MultiFormatKey_GetBytes_Call {
	return &MultiFormatKey_GetBytes_Call{Call: _e.mock.On("GetBytes")}
}

func (_c *MultiFormatKey_GetBytes_Call) Run(run func()) *MultiFormatKey_GetBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MultiFormatKey_GetBytes_Call) Return(_a0 []byte, _a1 error) *MultiFormatKey_GetBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetHex provides a mock function with given fields:
func (_m *MultiFormatKey) GetHex() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MultiFormatKey_GetHex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHex'
type MultiFormatKey_GetHex_Call struct {
	*mock.Call
}

// GetHex is a helper method to define mock.On call
func (_e *MultiFormatKey_Expecter) GetHex() *MultiFormatKey_GetHex_Call {
	return &MultiFormatKey_GetHex_Call{Call: _e.mock.On("GetHex")}
}

func (_c *MultiFormatKey_GetHex_Call) Run(run func()) *MultiFormatKey_GetHex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MultiFormatKey_GetHex_Call) Return(_a0 string) *MultiFormatKey_GetHex_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMultiFormatKey interface {
	mock.TestingT
	Cleanup(func())
}

// NewMultiFormatKey creates a new instance of MultiFormatKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMultiFormatKey(t mockConstructorTestingTNewMultiFormatKey) *MultiFormatKey {
	mock := &MultiFormatKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
