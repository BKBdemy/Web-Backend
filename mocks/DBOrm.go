// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	DatabaseAbstraction "EntitlementServer/DatabaseAbstraction"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DBOrm is an autogenerated mock type for the DBOrm type
type DBOrm struct {
	mock.Mock
}

type DBOrm_Expecter struct {
	mock *mock.Mock
}

func (_m *DBOrm) EXPECT() *DBOrm_Expecter {
	return &DBOrm_Expecter{mock: &_m.Mock}
}

// AddLicenseKey provides a mock function with given fields: licenseKey
func (_m *DBOrm) AddLicenseKey(licenseKey DatabaseAbstraction.LicenseKey) (int, error) {
	ret := _m.Called(licenseKey)

	var r0 int
	if rf, ok := ret.Get(0).(func(DatabaseAbstraction.LicenseKey) int); ok {
		r0 = rf(licenseKey)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(DatabaseAbstraction.LicenseKey) error); ok {
		r1 = rf(licenseKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_AddLicenseKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLicenseKey'
type DBOrm_AddLicenseKey_Call struct {
	*mock.Call
}

// AddLicenseKey is a helper method to define mock.On call
//   - licenseKey DatabaseAbstraction.LicenseKey
func (_e *DBOrm_Expecter) AddLicenseKey(licenseKey interface{}) *DBOrm_AddLicenseKey_Call {
	return &DBOrm_AddLicenseKey_Call{Call: _e.mock.On("AddLicenseKey", licenseKey)}
}

func (_c *DBOrm_AddLicenseKey_Call) Run(run func(licenseKey DatabaseAbstraction.LicenseKey)) *DBOrm_AddLicenseKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseAbstraction.LicenseKey))
	})
	return _c
}

func (_c *DBOrm_AddLicenseKey_Call) Return(_a0 int, _a1 error) *DBOrm_AddLicenseKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddOwnedProduct provides a mock function with given fields: indexID, productID
func (_m *DBOrm) AddOwnedProduct(indexID int, productID int) error {
	ret := _m.Called(indexID, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(indexID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_AddOwnedProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOwnedProduct'
type DBOrm_AddOwnedProduct_Call struct {
	*mock.Call
}

// AddOwnedProduct is a helper method to define mock.On call
//   - indexID int
//   - productID int
func (_e *DBOrm_Expecter) AddOwnedProduct(indexID interface{}, productID interface{}) *DBOrm_AddOwnedProduct_Call {
	return &DBOrm_AddOwnedProduct_Call{Call: _e.mock.On("AddOwnedProduct", indexID, productID)}
}

func (_c *DBOrm_AddOwnedProduct_Call) Run(run func(indexID int, productID int)) *DBOrm_AddOwnedProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *DBOrm_AddOwnedProduct_Call) Return(_a0 error) *DBOrm_AddOwnedProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

// AddProduct provides a mock function with given fields: NewProduct
func (_m *DBOrm) AddProduct(NewProduct DatabaseAbstraction.Product) (int, error) {
	ret := _m.Called(NewProduct)

	var r0 int
	if rf, ok := ret.Get(0).(func(DatabaseAbstraction.Product) int); ok {
		r0 = rf(NewProduct)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(DatabaseAbstraction.Product) error); ok {
		r1 = rf(NewProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_AddProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProduct'
type DBOrm_AddProduct_Call struct {
	*mock.Call
}

// AddProduct is a helper method to define mock.On call
//   - NewProduct DatabaseAbstraction.Product
func (_e *DBOrm_Expecter) AddProduct(NewProduct interface{}) *DBOrm_AddProduct_Call {
	return &DBOrm_AddProduct_Call{Call: _e.mock.On("AddProduct", NewProduct)}
}

func (_c *DBOrm_AddProduct_Call) Run(run func(NewProduct DatabaseAbstraction.Product)) *DBOrm_AddProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseAbstraction.Product))
	})
	return _c
}

func (_c *DBOrm_AddProduct_Call) Return(_a0 int, _a1 error) *DBOrm_AddProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddToken provides a mock function with given fields: userID, token, expiry
func (_m *DBOrm) AddToken(userID int, token string, expiry time.Time) error {
	ret := _m.Called(userID, token, expiry)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, time.Time) error); ok {
		r0 = rf(userID, token, expiry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_AddToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToken'
type DBOrm_AddToken_Call struct {
	*mock.Call
}

// AddToken is a helper method to define mock.On call
//   - userID int
//   - token string
//   - expiry time.Time
func (_e *DBOrm_Expecter) AddToken(userID interface{}, token interface{}, expiry interface{}) *DBOrm_AddToken_Call {
	return &DBOrm_AddToken_Call{Call: _e.mock.On("AddToken", userID, token, expiry)}
}

func (_c *DBOrm_AddToken_Call) Run(run func(userID int, token string, expiry time.Time)) *DBOrm_AddToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *DBOrm_AddToken_Call) Return(_a0 error) *DBOrm_AddToken_Call {
	_c.Call.Return(_a0)
	return _c
}

// AddUser provides a mock function with given fields: username, password
func (_m *DBOrm) AddUser(username string, password string) error {
	ret := _m.Called(username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type DBOrm_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *DBOrm_Expecter) AddUser(username interface{}, password interface{}) *DBOrm_AddUser_Call {
	return &DBOrm_AddUser_Call{Call: _e.mock.On("AddUser", username, password)}
}

func (_c *DBOrm_AddUser_Call) Run(run func(username string, password string)) *DBOrm_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DBOrm_AddUser_Call) Return(_a0 error) *DBOrm_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// DecreaseUserBalance provides a mock function with given fields: indexID, amount
func (_m *DBOrm) DecreaseUserBalance(indexID int, amount int) error {
	ret := _m.Called(indexID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(indexID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_DecreaseUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecreaseUserBalance'
type DBOrm_DecreaseUserBalance_Call struct {
	*mock.Call
}

// DecreaseUserBalance is a helper method to define mock.On call
//   - indexID int
//   - amount int
func (_e *DBOrm_Expecter) DecreaseUserBalance(indexID interface{}, amount interface{}) *DBOrm_DecreaseUserBalance_Call {
	return &DBOrm_DecreaseUserBalance_Call{Call: _e.mock.On("DecreaseUserBalance", indexID, amount)}
}

func (_c *DBOrm_DecreaseUserBalance_Call) Run(run func(indexID int, amount int)) *DBOrm_DecreaseUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *DBOrm_DecreaseUserBalance_Call) Return(_a0 error) *DBOrm_DecreaseUserBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteLicenseKey provides a mock function with given fields: indexID
func (_m *DBOrm) DeleteLicenseKey(indexID int) error {
	ret := _m.Called(indexID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(indexID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_DeleteLicenseKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicenseKey'
type DBOrm_DeleteLicenseKey_Call struct {
	*mock.Call
}

// DeleteLicenseKey is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) DeleteLicenseKey(indexID interface{}) *DBOrm_DeleteLicenseKey_Call {
	return &DBOrm_DeleteLicenseKey_Call{Call: _e.mock.On("DeleteLicenseKey", indexID)}
}

func (_c *DBOrm_DeleteLicenseKey_Call) Run(run func(indexID int)) *DBOrm_DeleteLicenseKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_DeleteLicenseKey_Call) Return(_a0 error) *DBOrm_DeleteLicenseKey_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteToken provides a mock function with given fields: tokenID
func (_m *DBOrm) DeleteToken(tokenID int) error {
	ret := _m.Called(tokenID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(tokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type DBOrm_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - tokenID int
func (_e *DBOrm_Expecter) DeleteToken(tokenID interface{}) *DBOrm_DeleteToken_Call {
	return &DBOrm_DeleteToken_Call{Call: _e.mock.On("DeleteToken", tokenID)}
}

func (_c *DBOrm_DeleteToken_Call) Run(run func(tokenID int)) *DBOrm_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_DeleteToken_Call) Return(_a0 error) *DBOrm_DeleteToken_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteUser provides a mock function with given fields: indexID
func (_m *DBOrm) DeleteUser(indexID int) error {
	ret := _m.Called(indexID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(indexID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type DBOrm_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) DeleteUser(indexID interface{}) *DBOrm_DeleteUser_Call {
	return &DBOrm_DeleteUser_Call{Call: _e.mock.On("DeleteUser", indexID)}
}

func (_c *DBOrm_DeleteUser_Call) Run(run func(indexID int)) *DBOrm_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_DeleteUser_Call) Return(_a0 error) *DBOrm_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAllLicenseKeys provides a mock function with given fields:
func (_m *DBOrm) GetAllLicenseKeys() ([]DatabaseAbstraction.LicenseKey, error) {
	ret := _m.Called()

	var r0 []DatabaseAbstraction.LicenseKey
	if rf, ok := ret.Get(0).(func() []DatabaseAbstraction.LicenseKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseAbstraction.LicenseKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetAllLicenseKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLicenseKeys'
type DBOrm_GetAllLicenseKeys_Call struct {
	*mock.Call
}

// GetAllLicenseKeys is a helper method to define mock.On call
func (_e *DBOrm_Expecter) GetAllLicenseKeys() *DBOrm_GetAllLicenseKeys_Call {
	return &DBOrm_GetAllLicenseKeys_Call{Call: _e.mock.On("GetAllLicenseKeys")}
}

func (_c *DBOrm_GetAllLicenseKeys_Call) Run(run func()) *DBOrm_GetAllLicenseKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBOrm_GetAllLicenseKeys_Call) Return(_a0 []DatabaseAbstraction.LicenseKey, _a1 error) *DBOrm_GetAllLicenseKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllProducts provides a mock function with given fields:
func (_m *DBOrm) GetAllProducts() ([]DatabaseAbstraction.Product, error) {
	ret := _m.Called()

	var r0 []DatabaseAbstraction.Product
	if rf, ok := ret.Get(0).(func() []DatabaseAbstraction.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseAbstraction.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type DBOrm_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
func (_e *DBOrm_Expecter) GetAllProducts() *DBOrm_GetAllProducts_Call {
	return &DBOrm_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts")}
}

func (_c *DBOrm_GetAllProducts_Call) Run(run func()) *DBOrm_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBOrm_GetAllProducts_Call) Return(_a0 []DatabaseAbstraction.Product, _a1 error) *DBOrm_GetAllProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *DBOrm) GetAllUsers() ([]DatabaseAbstraction.User, error) {
	ret := _m.Called()

	var r0 []DatabaseAbstraction.User
	if rf, ok := ret.Get(0).(func() []DatabaseAbstraction.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseAbstraction.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type DBOrm_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *DBOrm_Expecter) GetAllUsers() *DBOrm_GetAllUsers_Call {
	return &DBOrm_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *DBOrm_GetAllUsers_Call) Run(run func()) *DBOrm_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBOrm_GetAllUsers_Call) Return(_a0 []DatabaseAbstraction.User, _a1 error) *DBOrm_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLicenseKeyByIndexID provides a mock function with given fields: indexID
func (_m *DBOrm) GetLicenseKeyByIndexID(indexID int) (DatabaseAbstraction.LicenseKey, error) {
	ret := _m.Called(indexID)

	var r0 DatabaseAbstraction.LicenseKey
	if rf, ok := ret.Get(0).(func(int) DatabaseAbstraction.LicenseKey); ok {
		r0 = rf(indexID)
	} else {
		r0 = ret.Get(0).(DatabaseAbstraction.LicenseKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(indexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetLicenseKeyByIndexID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseKeyByIndexID'
type DBOrm_GetLicenseKeyByIndexID_Call struct {
	*mock.Call
}

// GetLicenseKeyByIndexID is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) GetLicenseKeyByIndexID(indexID interface{}) *DBOrm_GetLicenseKeyByIndexID_Call {
	return &DBOrm_GetLicenseKeyByIndexID_Call{Call: _e.mock.On("GetLicenseKeyByIndexID", indexID)}
}

func (_c *DBOrm_GetLicenseKeyByIndexID_Call) Run(run func(indexID int)) *DBOrm_GetLicenseKeyByIndexID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_GetLicenseKeyByIndexID_Call) Return(_a0 DatabaseAbstraction.LicenseKey, _a1 error) *DBOrm_GetLicenseKeyByIndexID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetLicenseKeyByKeyID provides a mock function with given fields: keyID
func (_m *DBOrm) GetLicenseKeyByKeyID(keyID string) (DatabaseAbstraction.LicenseKey, error) {
	ret := _m.Called(keyID)

	var r0 DatabaseAbstraction.LicenseKey
	if rf, ok := ret.Get(0).(func(string) DatabaseAbstraction.LicenseKey); ok {
		r0 = rf(keyID)
	} else {
		r0 = ret.Get(0).(DatabaseAbstraction.LicenseKey)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetLicenseKeyByKeyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseKeyByKeyID'
type DBOrm_GetLicenseKeyByKeyID_Call struct {
	*mock.Call
}

// GetLicenseKeyByKeyID is a helper method to define mock.On call
//   - keyID string
func (_e *DBOrm_Expecter) GetLicenseKeyByKeyID(keyID interface{}) *DBOrm_GetLicenseKeyByKeyID_Call {
	return &DBOrm_GetLicenseKeyByKeyID_Call{Call: _e.mock.On("GetLicenseKeyByKeyID", keyID)}
}

func (_c *DBOrm_GetLicenseKeyByKeyID_Call) Run(run func(keyID string)) *DBOrm_GetLicenseKeyByKeyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DBOrm_GetLicenseKeyByKeyID_Call) Return(_a0 DatabaseAbstraction.LicenseKey, _a1 error) *DBOrm_GetLicenseKeyByKeyID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOwnedLicenseKeys provides a mock function with given fields: indexID
func (_m *DBOrm) GetOwnedLicenseKeys(indexID int) ([]DatabaseAbstraction.LicenseKey, error) {
	ret := _m.Called(indexID)

	var r0 []DatabaseAbstraction.LicenseKey
	if rf, ok := ret.Get(0).(func(int) []DatabaseAbstraction.LicenseKey); ok {
		r0 = rf(indexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseAbstraction.LicenseKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(indexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetOwnedLicenseKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnedLicenseKeys'
type DBOrm_GetOwnedLicenseKeys_Call struct {
	*mock.Call
}

// GetOwnedLicenseKeys is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) GetOwnedLicenseKeys(indexID interface{}) *DBOrm_GetOwnedLicenseKeys_Call {
	return &DBOrm_GetOwnedLicenseKeys_Call{Call: _e.mock.On("GetOwnedLicenseKeys", indexID)}
}

func (_c *DBOrm_GetOwnedLicenseKeys_Call) Run(run func(indexID int)) *DBOrm_GetOwnedLicenseKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_GetOwnedLicenseKeys_Call) Return(_a0 []DatabaseAbstraction.LicenseKey, _a1 error) *DBOrm_GetOwnedLicenseKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOwnedProducts provides a mock function with given fields: indexID
func (_m *DBOrm) GetOwnedProducts(indexID int) ([]DatabaseAbstraction.Product, error) {
	ret := _m.Called(indexID)

	var r0 []DatabaseAbstraction.Product
	if rf, ok := ret.Get(0).(func(int) []DatabaseAbstraction.Product); ok {
		r0 = rf(indexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseAbstraction.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(indexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetOwnedProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnedProducts'
type DBOrm_GetOwnedProducts_Call struct {
	*mock.Call
}

// GetOwnedProducts is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) GetOwnedProducts(indexID interface{}) *DBOrm_GetOwnedProducts_Call {
	return &DBOrm_GetOwnedProducts_Call{Call: _e.mock.On("GetOwnedProducts", indexID)}
}

func (_c *DBOrm_GetOwnedProducts_Call) Run(run func(indexID int)) *DBOrm_GetOwnedProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_GetOwnedProducts_Call) Return(_a0 []DatabaseAbstraction.Product, _a1 error) *DBOrm_GetOwnedProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProductByIndexID provides a mock function with given fields: indexID
func (_m *DBOrm) GetProductByIndexID(indexID int) (DatabaseAbstraction.Product, error) {
	ret := _m.Called(indexID)

	var r0 DatabaseAbstraction.Product
	if rf, ok := ret.Get(0).(func(int) DatabaseAbstraction.Product); ok {
		r0 = rf(indexID)
	} else {
		r0 = ret.Get(0).(DatabaseAbstraction.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(indexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetProductByIndexID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByIndexID'
type DBOrm_GetProductByIndexID_Call struct {
	*mock.Call
}

// GetProductByIndexID is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) GetProductByIndexID(indexID interface{}) *DBOrm_GetProductByIndexID_Call {
	return &DBOrm_GetProductByIndexID_Call{Call: _e.mock.On("GetProductByIndexID", indexID)}
}

func (_c *DBOrm_GetProductByIndexID_Call) Run(run func(indexID int)) *DBOrm_GetProductByIndexID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_GetProductByIndexID_Call) Return(_a0 DatabaseAbstraction.Product, _a1 error) *DBOrm_GetProductByIndexID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProductLicenseKeys provides a mock function with given fields: indexID
func (_m *DBOrm) GetProductLicenseKeys(indexID int) ([]DatabaseAbstraction.LicenseKey, error) {
	ret := _m.Called(indexID)

	var r0 []DatabaseAbstraction.LicenseKey
	if rf, ok := ret.Get(0).(func(int) []DatabaseAbstraction.LicenseKey); ok {
		r0 = rf(indexID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseAbstraction.LicenseKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(indexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetProductLicenseKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductLicenseKeys'
type DBOrm_GetProductLicenseKeys_Call struct {
	*mock.Call
}

// GetProductLicenseKeys is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) GetProductLicenseKeys(indexID interface{}) *DBOrm_GetProductLicenseKeys_Call {
	return &DBOrm_GetProductLicenseKeys_Call{Call: _e.mock.On("GetProductLicenseKeys", indexID)}
}

func (_c *DBOrm_GetProductLicenseKeys_Call) Run(run func(indexID int)) *DBOrm_GetProductLicenseKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_GetProductLicenseKeys_Call) Return(_a0 []DatabaseAbstraction.LicenseKey, _a1 error) *DBOrm_GetProductLicenseKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTokenByHash provides a mock function with given fields: token
func (_m *DBOrm) GetTokenByHash(token string) (DatabaseAbstraction.Token, error) {
	ret := _m.Called(token)

	var r0 DatabaseAbstraction.Token
	if rf, ok := ret.Get(0).(func(string) DatabaseAbstraction.Token); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(DatabaseAbstraction.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetTokenByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenByHash'
type DBOrm_GetTokenByHash_Call struct {
	*mock.Call
}

// GetTokenByHash is a helper method to define mock.On call
//   - token string
func (_e *DBOrm_Expecter) GetTokenByHash(token interface{}) *DBOrm_GetTokenByHash_Call {
	return &DBOrm_GetTokenByHash_Call{Call: _e.mock.On("GetTokenByHash", token)}
}

func (_c *DBOrm_GetTokenByHash_Call) Run(run func(token string)) *DBOrm_GetTokenByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DBOrm_GetTokenByHash_Call) Return(_a0 DatabaseAbstraction.Token, _a1 error) *DBOrm_GetTokenByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTokenByTokenID provides a mock function with given fields: tokenID
func (_m *DBOrm) GetTokenByTokenID(tokenID string) (DatabaseAbstraction.Token, error) {
	ret := _m.Called(tokenID)

	var r0 DatabaseAbstraction.Token
	if rf, ok := ret.Get(0).(func(string) DatabaseAbstraction.Token); ok {
		r0 = rf(tokenID)
	} else {
		r0 = ret.Get(0).(DatabaseAbstraction.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetTokenByTokenID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenByTokenID'
type DBOrm_GetTokenByTokenID_Call struct {
	*mock.Call
}

// GetTokenByTokenID is a helper method to define mock.On call
//   - tokenID string
func (_e *DBOrm_Expecter) GetTokenByTokenID(tokenID interface{}) *DBOrm_GetTokenByTokenID_Call {
	return &DBOrm_GetTokenByTokenID_Call{Call: _e.mock.On("GetTokenByTokenID", tokenID)}
}

func (_c *DBOrm_GetTokenByTokenID_Call) Run(run func(tokenID string)) *DBOrm_GetTokenByTokenID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DBOrm_GetTokenByTokenID_Call) Return(_a0 DatabaseAbstraction.Token, _a1 error) *DBOrm_GetTokenByTokenID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByIndexID provides a mock function with given fields: indexID
func (_m *DBOrm) GetUserByIndexID(indexID int) (DatabaseAbstraction.User, error) {
	ret := _m.Called(indexID)

	var r0 DatabaseAbstraction.User
	if rf, ok := ret.Get(0).(func(int) DatabaseAbstraction.User); ok {
		r0 = rf(indexID)
	} else {
		r0 = ret.Get(0).(DatabaseAbstraction.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(indexID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetUserByIndexID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByIndexID'
type DBOrm_GetUserByIndexID_Call struct {
	*mock.Call
}

// GetUserByIndexID is a helper method to define mock.On call
//   - indexID int
func (_e *DBOrm_Expecter) GetUserByIndexID(indexID interface{}) *DBOrm_GetUserByIndexID_Call {
	return &DBOrm_GetUserByIndexID_Call{Call: _e.mock.On("GetUserByIndexID", indexID)}
}

func (_c *DBOrm_GetUserByIndexID_Call) Run(run func(indexID int)) *DBOrm_GetUserByIndexID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DBOrm_GetUserByIndexID_Call) Return(_a0 DatabaseAbstraction.User, _a1 error) *DBOrm_GetUserByIndexID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *DBOrm) GetUserByUsername(username string) (DatabaseAbstraction.User, error) {
	ret := _m.Called(username)

	var r0 DatabaseAbstraction.User
	if rf, ok := ret.Get(0).(func(string) DatabaseAbstraction.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(DatabaseAbstraction.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBOrm_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type DBOrm_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *DBOrm_Expecter) GetUserByUsername(username interface{}) *DBOrm_GetUserByUsername_Call {
	return &DBOrm_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *DBOrm_GetUserByUsername_Call) Run(run func(username string)) *DBOrm_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DBOrm_GetUserByUsername_Call) Return(_a0 DatabaseAbstraction.User, _a1 error) *DBOrm_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IncreaseUserBalance provides a mock function with given fields: indexID, amount
func (_m *DBOrm) IncreaseUserBalance(indexID int, amount int) error {
	ret := _m.Called(indexID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(indexID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_IncreaseUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncreaseUserBalance'
type DBOrm_IncreaseUserBalance_Call struct {
	*mock.Call
}

// IncreaseUserBalance is a helper method to define mock.On call
//   - indexID int
//   - amount int
func (_e *DBOrm_Expecter) IncreaseUserBalance(indexID interface{}, amount interface{}) *DBOrm_IncreaseUserBalance_Call {
	return &DBOrm_IncreaseUserBalance_Call{Call: _e.mock.On("IncreaseUserBalance", indexID, amount)}
}

func (_c *DBOrm_IncreaseUserBalance_Call) Run(run func(indexID int, amount int)) *DBOrm_IncreaseUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *DBOrm_IncreaseUserBalance_Call) Return(_a0 error) *DBOrm_IncreaseUserBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: indexID, newPassword
func (_m *DBOrm) UpdateUserPassword(indexID int, newPassword string) error {
	ret := _m.Called(indexID, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(indexID, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type DBOrm_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - indexID int
//   - newPassword string
func (_e *DBOrm_Expecter) UpdateUserPassword(indexID interface{}, newPassword interface{}) *DBOrm_UpdateUserPassword_Call {
	return &DBOrm_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", indexID, newPassword)}
}

func (_c *DBOrm_UpdateUserPassword_Call) Run(run func(indexID int, newPassword string)) *DBOrm_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *DBOrm_UpdateUserPassword_Call) Return(_a0 error) *DBOrm_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateUserUsername provides a mock function with given fields: indexID, newUsername
func (_m *DBOrm) UpdateUserUsername(indexID int, newUsername string) error {
	ret := _m.Called(indexID, newUsername)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(indexID, newUsername)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBOrm_UpdateUserUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserUsername'
type DBOrm_UpdateUserUsername_Call struct {
	*mock.Call
}

// UpdateUserUsername is a helper method to define mock.On call
//   - indexID int
//   - newUsername string
func (_e *DBOrm_Expecter) UpdateUserUsername(indexID interface{}, newUsername interface{}) *DBOrm_UpdateUserUsername_Call {
	return &DBOrm_UpdateUserUsername_Call{Call: _e.mock.On("UpdateUserUsername", indexID, newUsername)}
}

func (_c *DBOrm_UpdateUserUsername_Call) Run(run func(indexID int, newUsername string)) *DBOrm_UpdateUserUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *DBOrm_UpdateUserUsername_Call) Return(_a0 error) *DBOrm_UpdateUserUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewDBOrm interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBOrm creates a new instance of DBOrm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBOrm(t mockConstructorTestingTNewDBOrm) *DBOrm {
	mock := &DBOrm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
